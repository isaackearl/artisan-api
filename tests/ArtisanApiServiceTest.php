<?php

namespace IsaacKenEarl\LaravelApi;


use Illuminate\Contracts\View\Factory;
use Illuminate\Http\JsonResponse;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Routing\Redirector;
use Illuminate\Routing\ResponseFactory;
use IsaacKenEarl\LaravelApi\Exceptions\InvalidResponseCodeException;
use IsaacKenEarl\LaravelApi\Exceptions\InvalidStatusCodeException;
use IsaacKenEarl\LaravelApi\Interfaces\ArtisanApiServiceInterface;
use League\Fractal\Manager;
use Mockery as m;
use PHPUnit\Framework\TestCase;
use Spatie\Fractal\Fractal;

class ArtisanApiServiceTest extends TestCase
{

    /**
     * @var ArtisanApiServiceInterface
     */
    private $api;

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        m::close();
    }

    public function setUp()
    {
        parent::setUp();

        $factory = m::mock(Factory::class);
        $redirector = m::mock(Redirector::class);
        $manager = new Manager();

        $responseFactory = new ResponseFactory($factory, $redirector);
        $fractal = new Fractal($manager);

        $this->api = new ArtisanApiService($responseFactory, $fractal);
    }

    /** @test */
    public function it_gets_the_status_code()
    {
        $this->assertEquals(200, $this->api->getStatusCode());
    }

    /** @test */
    public function it_responds_ok()
    {
        $response = $this->api->respondOk();
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'message' => 'OK',
            'response_code' => ApiResponseCode::OK
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_unauthorized()
    {
        $response = $this->api->respondUnauthorized();
        $this->assertEquals(401, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Unauthorized',
            'response_code' => ApiResponseCode::UNAUTHORIZED
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_sets_the_status_code_and_returns_this()
    {
        $response = $this->api->setStatusCode(404);
        $this->assertInstanceOf(ArtisanApiServiceInterface::class, $response);
        $this->assertEquals(404, $this->api->getStatusCode());
    }

    /** @test */
    public function it_sets_the_response_code_and_returns_this()
    {
        $response = $this->api->setResponseCode(ApiResponseCode::UNAUTHORIZED);
        $this->assertInstanceOf(ArtisanApiServiceInterface::class, $response);
        $this->assertEquals(ApiResponseCode::UNAUTHORIZED, $this->api->getResponseCode());
    }

    /** @test */
    public function it_throws_an_invalid_response_code_exception()
    {
        $this->expectException(InvalidResponseCodeException::class);
        $this->api->setResponseCode(1);
    }

    /** @test */
    public function it_only_allows_int_for_the_status_code()
    {
        try {
            $this->api->setStatusCode("i love pizza");
        } catch (InvalidStatusCodeException $expected) {
            $this->assertEquals(500, $expected->getStatusCode());
            $this->assertInstanceOf(InvalidStatusCodeException::class, $expected);
            $this->assertEquals("Invalid Status Code (must be int)", $expected->getMessage());
            return;
        }
        $this->fail('InvalidStatusCodeException is not returned');
    }

    /** @test */
    public function it_responds()
    {
        $response = $this->api->respond(['message' => 'hello']);
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'message' => 'hello',
            'response_code' => ApiResponseCode::OK
        ]), $response->getContent());
        $this->assertInstanceOf(JsonResponse::class, $response);
    }

    /** @test */
    public function it_responds_not_found()
    {
        $response = $this->api->respondNotFound();
        $this->assertEquals(404, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Not Found!',
            'response_code' => ApiResponseCode::NOT_FOUND
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_internal_error()
    {
        $response = $this->api->respondInternalError();
        $this->assertEquals(500, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Internal Server Error',
            'response_code' => ApiResponseCode::INTERNAL_ERROR
        ]),
            $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_forbidden()
    {
        $response = $this->api->respondForbidden();
        $this->assertEquals(403, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Forbidden',
            'response_code' => ApiResponseCode::FORBIDDEN
        ]),
            $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_with_error()
    {
        $response = $this->api->respondWithError('Error!');
        $this->assertEquals(400, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Error!',
            'response_code' => ApiResponseCode::INVALID_REQUEST
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_with_error_and_optional_data()
    {
        $response = $this->api->respondWithError('Error!', ['lazers' => 'are cool']);
        $this->assertEquals(400, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Error!',
            'lazers' => 'are cool',
            'response_code' => ApiResponseCode::INVALID_REQUEST
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_with_message()
    {
        $response = $this->api->respondWithMessage('Hi');
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'message' => 'Hi',
            'response_code' => ApiResponseCode::OK
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_with_an_item()
    {
        $result = $this->api->respondWithItem($this->getDummyDataObject()[0], new DummyTransformer());
        $this->assertCount(1, (array)$result->getData()->data);
        $this->assertTrue($result->isOk());
    }

    /** @test */
    public function it_responds_not_found_when_item_is_null()
    {
        $response = $this->api->respondWithItem(null, new DummyTransformer());
        $this->assertEquals(404, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Not Found!',
            'response_code' => ApiResponseCode::NOT_FOUND
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_not_found_when_collection_is_null()
    {
        $response = $this->api->respondWithCollection(null, new DummyTransformer());
        $this->assertEquals(404, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Not Found!',
            'response_code' => ApiResponseCode::NOT_FOUND
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_not_found_when_paginated_collection_is_null()
    {
        $response = $this->api->respondWithPaginatedCollection(null, new DummyTransformer());
        $this->assertEquals(404, $response->getStatusCode());
        $this->assertJson($response->getContent());
        $this->assertJsonStringEqualsJsonString(json_encode([
            'error' => 'Not Found!',
            'response_code' => ApiResponseCode::NOT_FOUND
        ]), $response->getContent());
        $this->assertInstanceOf('Illuminate\Http\JsonResponse', $response);
    }

    /** @test */
    public function it_responds_with_a_collection()
    {
        $result = $this->api->respondWithCollection($this->getDummyDataObject(10), new DummyTransformer());

        $this->assertCount(10, (array)$result->getData()->data);
        $this->assertEquals(123, $result->getData()->data[0]->key);
        $this->assertEquals(123, $result->getData()->data[1]->key);
        foreach ($result->getData()->data as $r) {
            $this->assertCount(1, (array)$r);
        }
    }

    /** @test */
    public function it_responds_with_a_paginated_collection()
    {
        $pagination = new LengthAwarePaginator($this->getDummyDataObject(10), 100, 10, 2);

        $result = $this->api->respondWithPaginatedCollection($pagination, new DummyTransformer());

        $this->assertArrayHasKey("meta", (array)$result->getData());
        $this->assertCount(10, $result->getData()->data);
        $this->assertEquals(10, $result->getData()->meta->pagination->count);
        $this->assertEquals(100, $result->getData()->meta->pagination->total);
    }

    /** @test */
    public function it_can_parse_includes()
    {
        $factory = m::mock(Factory::class);
        $redirector = m::mock(Redirector::class);

        $responseFactory = new ResponseFactory($factory, $redirector);
        $fractal = m::mock(Fractal::class);

        $api = new ArtisanApiService($responseFactory, $fractal);

        $fractal->shouldReceive('parseIncludes')->with('bears')->once();

        $api->parseIncludes('bears');
    }

    private function getDummyDataObject($take = 1)
    {
        $data = [];
        for ($i = 0; $i < $take; $i++) {
            $object = new \stdClass();
            $object->key = "123";
            $data[] = $object;
        }

        return $data;
    }

}

